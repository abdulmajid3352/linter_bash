name: Release Notes Linter

on:
  pull_request:
    paths:
      - 'addons/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run release notes linter
        shell: bash
        run: |
          echo "Running release notes linter..."

          # Fetch all branches to ensure the script can compare against the main branch
          git fetch --all

          # Determine the target branch for comparison
          BASE_BRANCH=${GITHUB_BASE_REF:-"main"}

          # Find changed files in the PR
          changed_files=$(git diff --name-only --diff-filter=d origin/$BASE_BRANCH HEAD)

          echo "Changed files:"
          echo "$changed_files"

          # Allowed labels for curated release notes
          ALLOWED_LABELS=("kind/bug-fix" "kind/feature" "kind/upgrade-consideration" "kind/breaking-change" "kind/api-change" "kind/deprecation" "impact/high" "impact/medium")

          # Function to check if an element is in an array
          function contains() {
            local element
            for element in "${@:2}"; do
              if [[ "$element" == "$1" ]]; then
                return 0
              fi
            done
            return 1
          }

          # Loop through each changed file
          for file in $changed_files; do
            if [[ $file == addons/* ]]; then
              echo "Checking file: $file"

              # Check for raw and curated directories
              if [[ $file == *"/raw/"* ]] || [[ $file == *"/curated/"* ]]; then
                version_dir=$(echo "$file" | awk -F/ '{print $(NF-1)}')
                echo "Version directory: $version_dir"

                # Ensure directory starts with vX.X.X format
                if ! [[ $version_dir =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                  echo "Error: Directory $version_dir does not match the vX.X.X version format."
                  exit 1
                fi
              fi

              # Check curated release notes for allowed labels
              if [[ $file == *"/curated/"* && $file == *.json ]]; then
                echo "Validating labels in file: $file"

                # Extract labels from JSON file
                labels=$(jq -r '.notes[].label[]' "$file" 2>/dev/null)

                if [[ $? -ne 0 ]]; then
                  echo "Error: Failed to parse JSON file $file. Please ensure it is valid JSON."
                  exit 1
                fi

                echo "Found labels: $labels"

                # Validate each label
                for label in $labels; do
                  if ! contains "$label" "${ALLOWED_LABELS[@]}"; then
                    echo "Error: Invalid label '$label' in file $file. Allowed labels are: ${ALLOWED_LABELS[*]}"
                    exit 1
                  fi
                done
              fi
            fi
          done

          echo "Linter passed successfully."
