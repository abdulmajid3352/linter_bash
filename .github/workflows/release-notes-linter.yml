name: Validate Release Notes

on:
  pull_request:
    branches:
      - main

jobs:
  validate-schema:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate release notes
        run: |
          #!/bin/bash

          # Initialize error count
          error_count=0

          # Define allowed labels
          allowed_labels=("kind/bug-fix" "N/A" "kind/feature" "kind/upgrade-consideration" "kind/breaking-change" "kind/api-change" "kind/deprecation" "impact/high" "impact/medium")

          # Function to validate curated JSON release notes
          validate_curated_json() {
            local file="$1"
            echo "Validating $file"

            # Check required fields
            if ! jq -e '.addonName and .version and .releaseDate and .notes' "$file" > /dev/null; then
              echo "Error: $file is missing one or more required fields (addonName, version, releaseDate, notes)."
              error_count=$((error_count + 1))
              return
            fi

            # Validate release date format
            local release_date
            release_date=$(jq -r '.releaseDate' "$file")
            if [[ ! "$release_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
              echo "Error: Invalid date format in $file. Expected YYYY-MM-DD."
              error_count=$((error_count + 1))
              return
            fi

            # Validate actual date existence
            if ! date -d "$release_date" +"%Y-%m-%d" > /dev/null 2>&1; then
              echo "Error: Invalid date in $file. Expected a valid date in YYYY-MM-DD format."
              error_count=$((error_count + 1))
              return
            fi

            # Validate notes field for label and text
            local notes_count
            notes_count=$(jq '.notes | length' "$file")
            for (( i = 0; i < notes_count; i++ )); do
              local note_label note_text
              note_label=$(jq -r ".notes[$i].label[]" "$file")
              note_text=$(jq -r ".notes[$i].text" "$file")

              if [ -z "$note_label" ] || [ -z "$note_text" ]; then
                echo "Error: Note entry $i in $file has an empty 'label' or 'text' field."
                error_count=$((error_count + 1))
                continue
              fi

              # Validate label
              for label in $note_label; do
                if [[ ! " ${allowed_labels[@]} " =~ " $label " ]]; then
                  echo "Error: Invalid label '$label' in note entry $i of $file. Allowed labels are: ${allowed_labels[*]}."
                  error_count=$((error_count + 1))
                fi
              done
            done

            echo "$file passed all validation checks."
          }

          # Function to validate raw text release notes
          validate_raw_text() {
            local raw_file="$1"
            echo "Validating $raw_file"

            # Check if the file contains a valid source line
            local source_line source_link
            source_line=$(grep -E "^source: https?://.*" "$raw_file" || true)
            if [ -z "$source_line" ]; then
              echo "Error: $raw_file does not contain a valid 'source: <link>' line."
              error_count=$((error_count + 1))
              return
            fi

            # Extract and validate the link
            source_link=$(echo "$source_line" | awk '{print $2}')
            if ! curl -o /dev/null -s --head --write-out "%{http_code}" --fail "$source_link"; then
              echo "Error: The link in $raw_file is not reachable: $source_link"
              error_count=$((error_count + 1))
            fi

            echo "$raw_file passed all validation checks."
          }

          # Validate all curated JSON files
          for file in addons/**/curated/**/curated-release-notes.json; do
            validate_curated_json "$file"
          done

          # Validate all raw text files
          for raw_file in addons/**/raw/**/raw-release-notes.txt; do
            validate_raw_text "$raw_file"
          done

          # Final error check
          if [ $error_count -gt 0 ]; then
            echo "Total errors: $error_count"
            exit 1
          else
            echo "All files passed validation checks."
          fi
