name: Lint Release Notes

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt-get install -y jq curl

    - name: Determine Changed Files and Run Linter
      env:
        BASE_BRANCH: ${{ github.base_ref }}
      run: |
        #!/bin/bash

        # Determine the target branch for comparison
        BASE_BRANCH=${GITHUB_BASE_REF:-"main"}

        # Fetch all branches to ensure proper diffing
        git fetch origin $BASE_BRANCH

        # Get the list of changed files between the PR and base branch
        changed_files=$(git diff --name-only --diff-filter=d origin/$BASE_BRANCH HEAD)

        # If no files are detected, fallback to list all files in the PR branch
        if [[ -z "$changed_files" ]]; then
          echo "No changed files detected; assuming all files are new in this PR."
          changed_files=$(git ls-tree --name-only -r HEAD)
        fi

        echo "Changed files:"
        echo "$changed_files"

        # Filter only release note files (curated and raw) from the list of changed files
        curated_files=$(echo "$changed_files" | grep -E 'addons/.*/curated/.*/curated-release-notes.json')
        raw_files=$(echo "$changed_files" | grep -E 'addons/.*/raw/.*/raw-release-notes.txt')

        # Function to validate date format
        validate_date_format() {
          date="$1"
          if ! [[ "$date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "Invalid date format: $date. Expected format: YYYY-MM-DD."
            exit 1
          fi
        }

        # Function to validate allowed labels
        validate_labels() {
          allowed_labels=("kind/bug-fix" "N/A" "kind/feature" "kind/upgrade-consideration" "kind/breaking-change" "kind/api-change" "kind/deprecation" "impact/high" "impact/medium")
          labels=("$@")
          for label in "${labels[@]}"; do
            trimmed_label=$(echo "$label" | xargs)  # Trim spaces
            if [[ ! " ${allowed_labels[*]} " =~ " ${trimmed_label} " ]]; then
              echo "Invalid label: ${trimmed_label}. Allowed labels are: ${allowed_labels[*]}"
              exit 1
            fi
          done
        }

        # Function to validate curated release notes
        validate_curated_notes() {
          curated_file="$1"
          if ! jq empty "$curated_file" 2>/dev/null; then
            echo "Invalid JSON format in file: $curated_file"
            exit 1
          fi

          addon_name=$(jq -r '.addonName' "$curated_file")
          version=$(jq -r '.version' "$curated_file")
          release_date=$(jq -r '.releaseDate' "$curated_file")
          notes=$(jq -c '.notes' "$curated_file")

          if [[ -z "$addon_name" || -z "$version" || -z "$release_date" || -z "$notes" || "$notes" == "[]" ]]; then
            echo "Missing required fields or empty values in curated release notes: $curated_file"
            exit 1
          fi

          validate_date_format "$release_date"

          # Check each note in the notes array
          jq -c '.notes[]' "$curated_file" | while read -r note; do
            labels=$(echo "$note" | jq -r '.label[]')
            text=$(echo "$note" | jq -r '.text')

            if [[ -z "$labels" || -z "$text" ]]; then
              echo "Missing label or text in note in file: $curated_file"
              exit 1
            fi

            # Validate each label
            for label in $labels; do
              validate_labels "$label"
            done
          done
        }

        # Function to validate raw release notes
        validate_raw_notes() {
          raw_file="$1"
          if ! grep -q "^source: " "$raw_file"; then
            echo "Missing or incorrect source link in raw release notes: $raw_file"
            exit 1
          fi

          source_link=$(grep "^source: " "$raw_file" | awk '{print $2}')
          if ! curl --output /dev/null --silent --head --fail "$source_link"; then
            echo "Invalid source link: $source_link in file: $raw_file"
            exit 1
          fi
        }

        # Run validation only on changed curated files
        if [[ -n "$curated_files" ]]; then
          echo "Validating curated release notes..."
          for curated_file in $curated_files; do
            validate_curated_notes "$curated_file"
          done
        fi

        # Run validation only on changed raw files
        if [[ -n "$raw_files" ]]; then
          echo "Validating raw release notes..."
          for raw_file in $raw_files; do
            validate_raw_notes "$raw_file"
          done
        fi

        echo "All changed release notes are valid."
